{"version":3,"sources":["components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css","components/Dialogs/Dialogs.module.css","utils/validators/validators.ts","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["FormControl","_ref","_ref$meta","meta","touched","error","children","hasError","_jsxs","className","styles","formControl","_jsx","Textarea","props","input","restProps","_objectWithoutProperties","_excluded","_objectSpread","Input","_excluded2","createField","placeholder","name","validators","component","arguments","length","undefined","text","Field","validate","module","exports","required","value","maxLengthCreator","maxLength","concat","DialogItem","path","id","s","dialog","active","NavLink","to","Message","message","maxLength50","reduxForm","form","onSubmit","handleSubmit","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","AddMessageForm","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","Redirect"],"mappings":"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","file":"static/js/5.7621ec79.chunk.js","sourcesContent":["import React from \"react\"\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\"\r\nimport {Field, WrappedFieldProps} from \"redux-form\"\r\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                            name: FormKeysType,\r\n                            validators: Array<FieldValidatorType>,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props = {}, text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1voAS\",\"error\":\"FormsControls_error__3hfUY\",\"formSummaryError\":\"FormsControls_formSummaryError__23JB4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__14Asw\",\"dialogsItems\":\"Dialogs_dialogsItems__24fAM\",\"active\":\"Dialogs_active__2ALgi\",\"messages\":\"Dialogs_messages__25GeO\",\"message\":\"Dialogs_message__tbNXO\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Textarea} from '../../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {NewMessageFormValuesType} from '../Dialogs';\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType>\r\n    = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>(\"Enter your message\", 'newMessageBody', [required, maxLength50], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialog-add-message-form'})(AddMessageForm);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\nimport {InitialStateType} from '../../redux/dialogs-reducer';\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />  );\r\n    let messagesElements = state.messages.map( m => <Message message={m.message} key={m.id} /> );\r\n\r\n    let addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsElements }\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{ messagesElements }</div>\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from '../redux/redux-store';\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","import React from 'react';\r\nimport {actions} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n"],"sourceRoot":""}