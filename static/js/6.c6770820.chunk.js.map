{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","_jsxs","children","_jsx","_Fragment","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","_useState","useState","_useState2","_slicedToArray","isAutoScroll","setIsAutoScroll","_messagesAnchorRef$cu","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","memo","_ref","console","log","src","photo","alt","width","userName","_useState3","_useState4","setMessage","onChange","value","disabled","onClick","sendMessage","ChatPage"],"mappings":"gLAaMA,EAAiB,WAEnB,IAAMC,EAAWC,cAGXC,EAASC,aAAY,SAACC,GAAmB,OAAKA,EAAMC,KAAKH,MAAM,IASrE,OAPAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,cACb,CACJ,GAAG,CAACR,IAEGS,eAAA,OAAAC,SAAA,CACS,UAAXR,GAAsBS,cAAA,OAAAD,SAAK,gDAC5BD,eAAAG,WAAA,CAAAF,SAAA,CACIC,cAACE,EAAQ,IACTF,cAACG,EAAc,SAG3B,EAEMD,EAAqB,WACvB,IAAME,EAAWZ,aAAY,SAACC,GAAmB,OAAKA,EAAMC,KAAKU,QAAQ,IACnEC,EAAoBC,iBAAuB,MACjDC,EAAwCC,oBAAS,GAAKC,EAAAC,YAAAH,EAAA,GAA/CI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAkBpC,OANAd,qBAAU,WACa,IAADkB,EAAdF,IACyB,QAAzBE,EAAAR,EAAkBS,eAAO,IAAAD,GAAzBA,EAA2BE,eAAe,CAACC,SAAU,WAE7D,GAAG,CAACZ,EAAUO,IAEPb,eAAA,OAAKmB,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAhBnC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAMH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAiB,KAE/EjB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,EAExC,EAQiFb,SAAA,CAC5EK,EAASyB,KAAI,SAACC,EAAGC,GAAK,OAAK/B,cAACgC,EAAO,CAAYC,QAASH,GAAfA,EAAEI,GAAiB,IAC7DlC,cAAA,OAAKmC,IAAK9B,MAElB,EAGM2B,EAAqDI,IAAMC,MAAM,SAAAC,GAAgB,IAAdL,EAAOK,EAAPL,QAErE,OADAM,QAAQC,IAAI,iBACL1C,eAAA,OAAAC,SAAA,CACHC,cAAA,OAAKyC,IAAKR,EAAQS,MAAOC,IAAI,UAAU1B,MAAO,CAAC2B,MAAO,UAAU,IAAC5C,cAAA,KAAAD,SAAIkC,EAAQY,WAC7E7C,cAAA,SACCiC,EAAQA,QACTjC,cAAA,WAER,IAGMG,EAA+B,WACjC,IAAA2C,EAA8BtC,mBAAS,IAAGuC,EAAArC,YAAAoC,EAAA,GAAnCb,EAAOc,EAAA,GAAEC,EAAUD,EAAA,GACpB1D,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAmB,OAAKA,EAAMC,KAAKH,MAAM,IAWrE,OAAOO,eAAA,OAAAC,SAAA,CACHC,cAAA,OAAAD,SACIC,cAAA,YAAUiD,SAAU,SAAC5B,GAAC,OAAK2B,EAAW3B,EAAEE,cAAc2B,MAAM,EAAEA,MAAOjB,MAEzEjC,cAAA,OAAAD,SACIC,cAAA,UAAQmD,SAAqB,UAAX5D,EAAoB6D,QAbnB,WAClBnB,IAGL5C,EAASgE,YAAYpB,IACrBe,EAAW,IACf,EAO0EjD,SAAC,aAG/E,EAEeuD,UA7FY,WACvB,OAAOtD,cAAA,OAAAD,SACHC,cAACZ,EAAI,KAEb,C","file":"static/js/6.c6770820.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\r\nimport {ChatMessageAPIType} from '../../api/chat-api'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from '../../redux/chat-reducer'\r\nimport {AppStateType} from '../../redux/redux-store'\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return <div>\r\n        <Chat/>\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [dispatch])\r\n\r\n    return <div>\r\n        {status === 'error' && <div>Some error occured. Please refresh the page</div>}\r\n        <>\r\n            <Messages/>\r\n            <AddMessageForm/>\r\n        </>\r\n    </div>\r\n}\r\n\r\nconst Messages: React.FC = ()=> {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        if (Math.abs( (element.scrollHeight - element.scrollTop) - element.clientHeight ) < 300)\r\n        {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages, isAutoScroll])\r\n\r\n    return <div style={{height: '400px', overflowY: 'auto'}} onScroll={scrollHandler}>\r\n        {messages.map((m, index) => <Message key={m.id} message={m}/>)}\r\n        <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n}\r\n\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo( ({message}) => {\r\n    console.log(\">>>>>>Message\")\r\n    return <div>\r\n        <img src={message.photo} alt='message' style={{width: '30px'}}/> <b>{message.userName}</b>\r\n        <br/>\r\n        {message.message}\r\n        <hr/>\r\n    </div>\r\n})\r\n\r\n\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n        </div>\r\n        <div>\r\n            <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ChatPage\r\n"],"sourceRoot":""}