{"version":3,"sources":["assets/images/preloader.svg","components/common/Preloader/Preloader.tsx","components/common/Paginator/Paginator.module.css","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","assets/images/user.png","api/chat-api.ts","redux/chat-reducer.ts","components/Login/LoginPage.module.css","serviceWorker.js","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","assets/images/background1.jpg","assets/images/background2.jpg","components/Login/LoginPage.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","api/api.ts","components/Users/users.module.css"],"names":["Preloader","_jsx","style","backgroundColor","children","alt","src","preloader","module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dispatch","wrap","_context","prev","next","sent","stop","_x","apply","arguments","getStatus","_ref2","_callee2","_context2","_x2","updateStatus","_ref3","_callee3","_context3","resultCode","t0","_x3","savePhoto","file","_ref4","_callee4","_context4","_x4","saveProfile","_ref5","_callee5","getState","_context5","auth","Error","stopSubmit","_error","messages","abrupt","Promise","reject","_x5","_x6","profileReducer","state","length","undefined","action","newPost","_objectSpread","concat","_toConsumableArray","filter","p","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","subcribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","console","error","cleanUp","_ws","_ws2","_ws3","_ws4","removeEventListener","_ws5","close","WebSocket","addEventListener","chatAPI","_ws6","eventName","callback","push","_ws7","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","map","m","v1","index","array","Boolean","window","location","hostname","match","authAPI","email","password","_arguments","rememberMe","captcha","post","delete","securityAPI","login","isAuth","captchaUrl","getAuthUserData","meData","_meData$data","_login","ResultCodesEnum","Success","getCaptchaUrl","url","authReducer","LoginPage","useSelector","useDispatch","_useState","useState","_useState2","_slicedToArray","showBackground1","setShowBackground1","useEffect","interval","setInterval","prevShowBackground1","clearInterval","Redirect","to","_jsxs","className","background1","background2","Form","onFinish","values","ResultCodeForCapcthaEnum","CaptchaIsRequired","width","Item","rules","required","Input","prefix","UserOutlined","placeholder","LockOutlined","valuePropName","Checkbox","Button","htmlType","initialized","appReducer","sidebarReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","u","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","unfollow","users","totalUsersCount","isFetching","followingInProgress","count","requestUsers","page","totalCount","usersReducer","followed","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","form","formReducer","app","chat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","props","React","Suspense","fallback","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","Paginator","totalItemsCount","_ref$currentPage","_ref$onPageChanged","onPageChanged","x","_ref$portionSize","portionSize","pagesCount","Math","ceil","pages","i","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","styles","paginator","onClick","_defineProperty","selectedPage","pageNumber","User","user","NavLink","small","userPhoto","userBtn","btnF","disabled","some","usersInfo","usersSearchFormValidate","UsersSearchForm","memo","Formik","enableReinitialize","initialValues","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","Field","as","value","Users","history","useHistory","parsed","queryString","search","substr","actualPage","actualFilter","Number","query","pathname","UsersPage","_Fragment","pageTitle","selectIsAuth","selectCurrentUserLogin","Header","Layout","Row","Col","span","Menu","theme","mode","defaultSelectedKeys","Link","Avatar","icon","SubMenu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","ChatPage","SuspendedDialogs","SuspendedProfile","SuspendedChatPage","App","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","catchAllUnhandledErrors","alert","_createClass","key","this","initializeApp","padding","Breadcrumb","margin","height","rev","title","LaptopOutlined","NotificationOutlined","minHeight","Switch","Route","exact","path","render","textAlign","Component","AppContainer","withRouter","connect","promise","all","GossipersApp","BrowserRouter","Provider","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","axios","create","withCredentials","baseURL"],"mappings":"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","file":"static/js/main.fd7f981f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/preloader.5788b05c.svg\";","import React from 'react';\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\n\r\nlet Preloader: React.FC = () => {\r\n    return <div  style={ { backgroundColor: 'white' } }>\r\n        <img alt='preloader' src={preloader} />\r\n    </div>\r\n}\r\n\r\nexport default Preloader;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__3djIQ\",\"pageNumber\":\"Paginator_pageNumber__CrdaJ\",\"selectedPage\":\"Paginator_selectedPage__2qVv5\"};","import {PhotosType, ProfileType} from '../types/types';\r\nimport {instance, APIResponseType} from './api';\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data);\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\r\n    }\r\n}\r\n","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from '../types/types';\r\nimport {profileAPI} from '../api/profile-api';\r\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 3, message: 'Blabla', likesCount: 11},\r\n        {id: 4, message: 'Dada', likesCount: 11}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD-POST': {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n        }\r\n        case 'SN/PROFILE/SET_STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case 'SN/PROFILE/SET_USER_PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n\r\n        case 'SN/PROFILE/DELETE_POST':\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n\r\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD-POST', newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\r\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\r\n}\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId)\r\n    dispatch(actions.setUserProfile(data))\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(actions.setStatus(data))\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let data = await profileAPI.updateStatus(status)\r\n\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.setStatus(status))\r\n        }\r\n    } catch(error) {\r\n        //\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file)\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos))\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.saveProfile(profile)\r\n\r\n    if (data.resultCode === 0) {\r\n        if (userId != null) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0] }))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","import {InferActionsTypes} from './redux-store';\r\n\r\ntype DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrew'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Viktor'},\r\n        {id: 6, name: 'Valera'}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it-kamasutra?'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'}\r\n    ] as Array<MessageType>\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/DIALOGS/SEND_MESSAGE':\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) => ({type: 'SN/DIALOGS/SEND_MESSAGE', newMessageBody} as const)\r\n}\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n","export default __webpack_public_path__ + \"static/media/user.96e310a6.png\";","const subcribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000)\r\n}\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subcribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n}\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subcribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n}\r\n\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subcribers['messages-received'] = []\r\n        subcribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subcribers[eventName].push(callback)\r\n        return () => {\r\n            // @ts-ignore\r\n            subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\nexport type StatusType = 'pending' | 'ready' | 'error'\r\n","import {BaseThunkType, InferActionsTypes} from './redux-store'\r\nimport {Dispatch} from 'redux'\r\nimport {FormAction} from 'redux-form/lib/actions'\r\nimport {chatAPI, ChatMessageAPIType, StatusType} from '../api/chat-api'\r\nimport {v1} from 'uuid'\r\n\r\ntype ChatMessageType = ChatMessageAPIType & {id: string}\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusType\r\n}\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/chat/MESSAGES_RECEVIED':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages.map( m => ({...m, id: v1() }))]\r\n                    .filter((m, index, array) => index >= array.length - 100)\r\n            }\r\n        case 'SN/chat/STATUS_CHANGED':\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\r\n        type: 'SN/chat/MESSAGES_RECEVIED', payload: {messages}\r\n    } as const),\r\n    statusChanged: (status: StatusType) => ({\r\n        type: 'SN/chat/STATUS_CHANGED', payload: {status}\r\n    } as const)\r\n}\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n\r\n}\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\n\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n    chatAPI.sendMessage(message)\r\n}\r\n\r\n\r\nexport default chatReducer\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login-page-container\":\"LoginPage_login-page-container__1TYM7\",\"background-image\":\"LoginPage_background-image__th0ZY\",\"flickerAnimation\":\"LoginPage_flickerAnimation__15wks\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that gossipers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing gossipers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {instance, APIResponseType, ResultCodeForCapcthaEnum, ResultCodesEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    async me() {\r\n        const res = await instance.get<APIResponseType<MeResponseDataType>>(`auth/me`);\r\n        return res.data;\r\n    },\r\n    async login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        const res = await instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCapcthaEnum>>(`auth/login`, { email, password, rememberMe, captcha });\r\n        return res.data;\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}\r\n","import {instance} from './api';\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data);\r\n    }\r\n}\r\n","import {ResultCodeForCapcthaEnum, ResultCodesEnum} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {authAPI} from '../api/auth-api';\r\nimport {securityAPI} from '../api/security-api';\r\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\r\nimport {FormAction} from 'redux-form/lib/actions';\r\n\r\nlet initialState = {\r\n    userId: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null// if null, then captcha is not required\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/auth/SET_USER_DATA':\r\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\r\n    } as const)\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me()\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        // success, get auth data\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (data.resultCode === ResultCodeForCapcthaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch: any) => {\r\n    let response = await authAPI.logout()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","export default __webpack_public_path__ + \"static/media/background1.a39e6054.jpg\";","export default __webpack_public_path__ + \"static/media/background2.2a69b7b8.jpg\";","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Form, Input, Checkbox, Button } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\nimport background1 from '../../assets/images/background1.jpg';\r\nimport background2 from '../../assets/images/background2.jpg';\r\n\r\nimport './LoginPage.module.css';\r\n\r\nconst LoginPage = () => {\r\n  const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl);\r\n  const isAuth = useSelector((state: AppStateType) => state.auth.isAuth);\r\n  const dispatch = useDispatch();\r\n\r\n  const [showBackground1, setShowBackground1] = useState(true);\r\n\r\n  const onFinish = (values: { email: string; password: string; rememberMe: boolean; captcha: string; }) => {\r\n    dispatch(login(values.email, values.password, values.rememberMe, values.captcha));\r\n  };\r\n\r\n  // Используем useEffect для автоматического переключения фоновых изображений через определенное время\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setShowBackground1((prevShowBackground1) => !prevShowBackground1);\r\n    }, 5000);\r\n\r\n\r\n    return () => clearInterval(interval);\r\n  }, []); \r\n\r\n  if (isAuth) {\r\n    return <Redirect to=\"/profile\" />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"login-page-container\">\r\n      {showBackground1 && (\r\n        <img\r\n          src={background1}\r\n          alt=\"background1\"\r\n          className=\"background-image\"\r\n        />\r\n      )}\r\n      {!showBackground1 && (\r\n        <img\r\n          src={background2}\r\n          alt=\"background2\"\r\n          className=\"background-image\"\r\n        />\r\n      )}\r\n\r\n      <h1>Login</h1>\r\n      <Form name=\"login\" onFinish={onFinish} style={{ width: '500px' }}>\r\n        <Form.Item\r\n          name=\"email\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Please input your Email!',\r\n            },\r\n          ]}\r\n        >\r\n          <Input prefix={<UserOutlined />} placeholder=\"Email\" />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Please input your Password!',\r\n            },\r\n          ]}\r\n        >\r\n          <Input prefix={<LockOutlined />} type=\"password\" placeholder=\"Password\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"rememberMe\" valuePropName=\"checked\">\r\n          <Checkbox>Remember me</Checkbox>\r\n        </Form.Item>\r\n\r\n        {captchaUrl && (\r\n          <div>\r\n            <img src={captchaUrl} alt=\"link-captcha\" />\r\n            <Form.Item\r\n              name=\"captcha\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Please input the symbols from the image!',\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"Symbols from image\" />\r\n            </Form.Item>\r\n          </div>\r\n        )}\r\n\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Login\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import {getAuthUserData} from \"./auth-reducer\"\r\nimport {InferActionsTypes} from './redux-store';\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\n\r\nexport default appReducer;\r\n","let initialState = {}\r\n//type InitialStateType = typeof initialState;\r\nconst sidebarReducer = (state = initialState, action: any) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;\r\n","\r\nexport const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n","import {GetItemsType, instance, APIResponseType} from './api';\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`) )\r\n            .then(res => res.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    }\r\n}\r\n","import {updateObjectInArray} from '../utils/object-helpers'\r\nimport {UserType} from '../types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './redux-store'\r\nimport {Dispatch} from 'redux'\r\nimport {usersAPI} from '../api/users-api'\r\nimport {APIResponseType} from '../api/api'\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, //array of users ids,\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        case 'SN/USERS/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'SN/USERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case 'SN/USERS/SET_FILTER': {\r\n            return {...state, filter: action.payload}\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\r\n        count: totalUsersCount\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\r\n        isFetching\r\n    } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\nexport const requestUsers = (page: number,\r\n                             pageSize: number, filter: FilterType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        dispatch(actions.setCurrentPage(page))\r\n        dispatch(actions.setFilter(filter))\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n        dispatch(actions.toggleIsFetching(false))\r\n        dispatch(actions.setUsers(data.items))\r\n        dispatch(actions.setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\r\n                                   userId: number,\r\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\n\r\nexport type InitialState = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\nimport chatReducer from './chat-reducer'\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    chat: chatReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer; // (globalstate: AppStateType) => AppStateType\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n// @ts-ignore\r\nwindow.__store__ = store\r\n\r\nexport default store\r\n","import React from \"react\";\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<div>loading...</div>} >\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    }\r\n}\r\n","import {createSelector} from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n    return users.filter(u => true);\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n}\r\n","import React, {useState} from 'react'\r\nimport styles from './Paginator.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    onPageChanged?: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize,\r\n                                      currentPage = 1,\r\n                                      onPageChanged = x => x,\r\n                                      portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return <div className={cn(styles.paginator)}>\r\n        { portionNumber > 1 &&\r\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\r\n                .map((p) => {\r\n                return <span className={ cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber) }\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        { portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport default Paginator;\r\n","import React from 'react'\r\nimport styles from './users.module.css'\r\nimport userPhoto from '../../assets/images/user.png'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {UserType} from '../../types/types'\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n        <div className={styles.users}>\r\n                <div>\r\n                    <div>\r\n                       <NavLink to={'/profile/' + user.id}>\r\n                        <img alt='avatar' src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                             className={styles.userPhoto}/>\r\n                       </NavLink>\r\n                    </div>\r\n                    <div className={styles.userBtn}>\r\n                        {user.followed\r\n                            ? <button className={styles.btnF} disabled={followingInProgress\r\n                                .some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          unfollow(user.id)\r\n                                      }}>\r\n                                Unfollow</button>\r\n                            : <button className={styles.btnF} disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          follow(user.id)\r\n                                      }}>\r\n                                Follow</button>}\r\n\r\n                    </div>\r\n                </div>\r\n            <div className={styles.usersInfo}>\r\n                    <div>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </div>\r\n                    <div>\r\n                        <div>{'user.location.country'}</div>\r\n                        <div>{'user.location.city'}</div>\r\n                    </div>\r\n                </div>\r\n        </div>)\r\n}\r\n\r\nexport default User;\r\n","import {Field, Form, Formik} from 'formik'\r\nimport React from 'react'\r\nimport {FilterType} from '../../redux/users-reducer'\r\nimport {useSelector} from 'react-redux'\r\nimport {getUsersFilter} from '../../redux/users-selectors'\r\nimport './users.module.css';\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {}\r\n    return errors\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\n\r\ntype FormType = {\r\n    term: string\r\n    friend: 'true' | 'false' | 'null'\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n    const filter = useSelector(getUsersFilter)\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return <div>\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form className='form-search'>\r\n                    <Field type=\"text\" name=\"term\"/>\r\n\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Only followed</option>\r\n                        <option value=\"false\">Only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n});\r\n","import React, { FC, useEffect } from 'react'\r\nimport Paginator from '../common/Paginator/Paginator'\r\nimport User from './User'\r\nimport { UsersSearchForm } from './UsersSearchForm'\r\nimport { FilterType, requestUsers } from '../../redux/users-reducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from '../../redux/users-selectors'\r\nimport { useHistory } from 'react-router-dom'\r\nimport * as queryString from 'querystring'\r\n\r\ntype PropsType = {}\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\r\nexport const Users: FC<PropsType> = (props) => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n\r\n        if (!!parsed.term) actualFilter = { ...actualFilter, term: parsed.term as string }\r\n\r\n        switch (parsed.friend) {\r\n            case \"null\":\r\n                actualFilter = { ...actualFilter, friend: null }\r\n                break;\r\n            case \"true\":\r\n                actualFilter = { ...actualFilter, friend: true }\r\n                break;\r\n            case \"false\":\r\n                actualFilter = { ...actualFilter, friend: false }\r\n                break;\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [currentPage, dispatch, filter, history, pageSize])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/gossipers',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage, history])\r\n\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n    const follow = (userId: number) => {\r\n        dispatch(follow(userId));\r\n    }\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId));\r\n    }\r\n\r\n    return <div>\r\n\r\n        <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n            totalItemsCount={totalUsersCount} pageSize={pageSize} />\r\n        <div>\r\n            {\r\n                users.map(u => <User user={u}\r\n                    followingInProgress={followingInProgress}\r\n                    key={u.id}\r\n                    unfollow={unfollow}\r\n                    follow={follow}\r\n                />\r\n                )\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n","import React from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport {getIsFetching} from '../../redux/users-selectors'\r\nimport {Users} from './Users'\r\n\r\ntype UsersPagePropsType = {\r\n    pageTitle: string\r\n}\r\n\r\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\r\n    const isFetching = useSelector(getIsFetching)\r\n    return <>\r\n        <h2>{props.pageTitle}</h2>\r\n        {isFetching ? <Preloader/> : null}\r\n        <Users />\r\n    </>\r\n}\r\n","import {AppStateType} from './redux-store'\r\n\r\nexport const selectIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\n\r\nexport const selectCurrentUserLogin = (state: AppStateType) => {\r\n    return state.auth.login\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Avatar, Button, Col, Layout, Menu, Row } from 'antd'\r\nimport { UserOutlined } from '@ant-design/icons'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { selectCurrentUserLogin, selectIsAuth } from '../../redux/auth-selectors'\r\nimport { logout } from '../../redux/auth-reducer'\r\nimport './Header.style.css';\r\n\r\nexport type MapPropsType = {}\r\n\r\nexport const Header: React.FC<MapPropsType> = (props) => {\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const login = useSelector(selectCurrentUserLogin)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n\r\n    const { Header } = Layout\r\n\r\n    return <Header>\r\n        <Row>\r\n            <Col span={18}>\r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                    <Menu.Item key=\"1\"><Link to=\"/gossipers\">Gossipers</Link></Menu.Item>\r\n                </Menu>\r\n            </Col>\r\n\r\n            {isAuth\r\n                ? <> <Col span={1}>\r\n                    <Avatar alt={login || ''} icon={<UserOutlined/>} />\r\n                </Col>\r\n                    <Col span={5}>\r\n                        <Button onClick={logoutCallback}>LogOut</Button>\r\n                    </Col>\r\n                </>\r\n                : <Col span={6}>\r\n                    <Button>\r\n                        <Link to={'/login'}>Login</Link>\r\n                    </Button>\r\n                </Col>}\r\n\r\n        </Row>\r\n\r\n\r\n    </Header>\r\n}\r\n","import React, {Component} from 'react'\r\nimport './App.css'\r\nimport 'antd/dist/antd.css'\r\nimport {BrowserRouter, Link, Redirect, Route, Switch, withRouter} from 'react-router-dom'\r\nimport LoginPage from './components/Login/LoginPage';\r\nimport {connect, Provider} from 'react-redux'\r\nimport {compose} from 'redux'\r\nimport {initializeApp} from './redux/app-reducer'\r\nimport Preloader from './components/common/Preloader/Preloader'\r\nimport store, {AppStateType} from './redux/redux-store'\r\nimport {withSuspense} from './hoc/withSuspense'\r\nimport {UsersPage} from './components/Users/UsersContainer'\r\n\r\nimport {Breadcrumb, Layout, Menu} from 'antd'\r\nimport {LaptopOutlined, NotificationOutlined, UserOutlined} from '@ant-design/icons'\r\nimport {Header} from './components/Header/Header'\r\n\r\nconst {SubMenu} = Menu\r\nconst {Content, Footer, Sider} = Layout\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\r\nconst ChatPage = React.lazy(() => import('./pages/Chat/ChatPage'))\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer)\r\nconst SuspendedProfile = withSuspense(ProfileContainer)\r\nconst SuspendedChatPage = withSuspense(ChatPage)\r\n\r\n\r\nclass App extends Component<MapPropsType & DispatchPropsType> {\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        alert('Some error occured')\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n\r\n        return (\r\n            <Layout>\r\n                <Header/>\r\n                <Content style={{padding: '0 50px'}}>\r\n                    <Breadcrumb style={{margin: '16px 0'}}>\r\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\r\n                        <Sider className=\"site-layout-background\" width={200}>\r\n                            <Menu\r\n                                mode=\"inline\"\r\n                                style={{height: '100%'}}\r\n                            >\r\n                                <SubMenu key=\"sub1\" icon={<UserOutlined rev={undefined}/>} title=\"My Profile\">\r\n                                    <Menu.Item key=\"1\"> <Link to=\"/profile\">Profile</Link></Menu.Item>\r\n                                    <Menu.Item key=\"2\"> <Link to=\"/dialogs\">Messages</Link></Menu.Item>\r\n                                    <Menu.Item key=\"3\">option3</Menu.Item>\r\n                                    <Menu.Item key=\"4\">option4</Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub2\" icon={<LaptopOutlined rev={undefined}/>} title=\"Gossipers\">\r\n                                    <Menu.Item key=\"5\"><Link to=\"/gossipers\">Gossipers</Link></Menu.Item>\r\n                                    <Menu.Item key=\"6\">option6</Menu.Item>\r\n                                    <Menu.Item key=\"7\">option7</Menu.Item>\r\n                                    <Menu.Item key=\"8\">option8</Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub3\" icon={<NotificationOutlined rev={undefined}/>} title=\"subnav 3\">\r\n                                    <Menu.Item key=\"9\"><Link to=\"/chat\">Chat</Link></Menu.Item>\r\n                                    <Menu.Item key=\"10\">option10</Menu.Item>\r\n                                    <Menu.Item key=\"11\">option11</Menu.Item>\r\n                                    <Menu.Item key=\"12\">option12</Menu.Item>\r\n                                </SubMenu>\r\n                            </Menu>\r\n                        </Sider>\r\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\r\n\r\n                            <Switch>\r\n                                <Route exact path='/'\r\n                                       render={() => <Redirect to={'/profile'}/>}/>\r\n\r\n                                <Route path='/dialogs'\r\n                                       render={() => <SuspendedDialogs/>}/>\r\n\r\n                                <Route path='/profile/:userId?'\r\n                                       render={() => <SuspendedProfile/>}/>\r\n\r\n                                <Route path='/gossipers'\r\n                                       render={() => <UsersPage pageTitle={'Gossipers'}/>}/>\r\n\r\n                                <Route path='/login'\r\n                                       render={() => <LoginPage/>}/>\r\n\r\n                                <Route path='/chat'\r\n                                       render={() => <SuspendedChatPage/>}/>\r\n\r\n                                <Route path='*'\r\n                                       render={() => <div>404 NOT FOUND</div>}/>\r\n                            </Switch>\r\n\r\n                        </Content>\r\n                    </Layout>\r\n                </Content>\r\n                <Footer style={{textAlign: 'center'}}>Gossipers Social Network ©2023 Created by Anna Romanova</Footer>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App)\r\n\r\nconst GossipersApp: React.FC = () => {\r\n    return <BrowserRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n}\r\n\r\nexport default GossipersApp;\r\n","import * as serviceWorker from './serviceWorker';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport GossipersApp from \"./App\";\r\n\r\nReactDOM.render(<GossipersApp/>, document.getElementById('root'));\r\n\r\n\r\n// API\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import axios from \"axios\";\r\nimport {UserType} from '../types/types';\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers:     {\r\n        \"API-KEY\": \"bc114b17-7d81-4f3a-b1ca-773d65c314f2\"\r\n    }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCapcthaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__Qxnkf\",\"form-search\":\"users_form-search__FkNou\",\"search-form__input-container\":\"users_search-form__input-container__1R9pM\",\"users\":\"users_users__1aFxx\",\"usersInfo\":\"users_usersInfo__14uEd\",\"userBtn\":\"users_userBtn__2UwfN\",\"btnF\":\"users_btnF__1JM9-\"};"],"sourceRoot":""}